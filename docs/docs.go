// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/forget_password": {
            "put": {
                "description": "Voir le profil d'un utilisateur",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentications"
                ],
                "summary": "Voir le profil d'un utilisateur",
                "responses": {}
            }
        },
        "/auth/init_password": {
            "put": {
                "description": "Initialisation du mot de passe utilisateur",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentications"
                ],
                "summary": "Initialisation du mot de passe utilisateur",
                "parameters": [
                    {
                        "description": "Body data",
                        "name": "init_password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authentications.InitUserPasswordIn"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/utils.HttpResponse-any"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authentifier un utlisateur",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentications"
                ],
                "summary": "Authentifier un utlisateur",
                "parameters": [
                    {
                        "description": "Détails de l'utilisateur",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authentications.AuthIn"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/utils.HttpResponse-authentications_AuthOut"
                        }
                    }
                }
            }
        },
        "/auth/me": {
            "get": {
                "description": "Voir le profil d'un utilisateur",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentications"
                ],
                "summary": "Voir le profil d'un utilisateur",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/utils.HttpResponse-users_UserOut"
                        }
                    }
                }
            }
        },
        "/auth/refresh_token": {
            "put": {
                "description": "Rafraichir le token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentications"
                ],
                "summary": "Rafraichir le token",
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/utils.HttpResponse-authentications_RefreshTokenOut"
                        }
                    }
                }
            }
        },
        "/auth/reset_password": {
            "put": {
                "description": "Changer de mot de passe",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentications"
                ],
                "summary": "Changer de mot de passe",
                "parameters": [
                    {
                        "description": "Détails de l'utilisateur",
                        "name": "reset_password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authentications.ResetPasswordIn"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/utils.HttpResponse-authentications_AuthOut"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Récupère la liste de tous les utilisateurs.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Récupère tous les utilisateurs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.User"
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Met à jour un utilisateur en fonction de son ID avec les détails fournis.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Met à jour un utilisateur",
                "parameters": [
                    {
                        "description": "Détails de l'utilisateur à mettre à jour",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.UserIn"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.HttpResponse-users_UserOut"
                        }
                    }
                }
            },
            "post": {
                "description": "Crée un nouvel utilisateur avec les détails fournis.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Crée un nouvel utilisateur",
                "parameters": [
                    {
                        "description": "Body data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.UserIn"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/utils.HttpResponse-users_UserOut"
                        }
                    }
                }
            }
        },
        "/users/profile": {
            "get": {
                "description": "view user profile info.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "User profile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.HttpResponse-users_UserOut"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Récupère un utilisateur en fonction de son ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Récupère un utilisateur par ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID de l'utilisateur",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    }
                }
            },
            "put": {
                "description": "Met à jour un utilisateur en fonction de son ID avec les détails fournis.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Met à jour un utilisateur",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID de l'utilisateur",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Body data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.UserIn"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.HttpResponse-users_UserOut"
                        }
                    }
                }
            },
            "delete": {
                "description": "Supprime un utilisateur en fonction de son ID.",
                "tags": [
                    "Users"
                ],
                "summary": "Supprime un utilisateur",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID de l'utilisateur",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Aucun contenu"
                    }
                }
            }
        },
        "/users/{id}/assign-role/{role}": {
            "post": {
                "description": "Assigner un rôle spécifié à un utilisateur en fonction de son ID.",
                "tags": [
                    "Users"
                ],
                "summary": "Assigner un rôle à un utilisateur",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID de l'utilisateur",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Rôle à assigner",
                        "name": "role",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Aucun contenu"
                    }
                }
            }
        },
        "/users/{id}/remove-role/{role}": {
            "post": {
                "description": "Supprimer un rôle spécifié d'un utilisateur en fonction de son ID.",
                "tags": [
                    "Users"
                ],
                "summary": "Supprimer un rôle d'un utilisateur",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID de l'utilisateur",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Rôle à supprimer",
                        "name": "role",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Aucun contenu"
                    }
                }
            }
        }
    },
    "definitions": {
        "authentications.AuthIn": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "authentications.AuthOut": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "token": {
                    "$ref": "#/definitions/authentications.Token"
                }
            }
        },
        "authentications.InitUserPasswordIn": {
            "type": "object",
            "required": [
                "password",
                "user_id"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "authentications.RefreshTokenOut": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "token": {
                    "$ref": "#/definitions/authentications.Token"
                }
            }
        },
        "authentications.ResetPasswordIn": {
            "type": "object",
            "required": [
                "new_password",
                "old_password"
            ],
            "properties": {
                "new_password": {
                    "type": "string"
                },
                "old_password": {
                    "type": "string"
                }
            }
        },
        "authentications.Token": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "model.User": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password",
                "role_id",
                "sername",
                "username"
            ],
            "properties": {
                "create_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_available": {
                    "type": "boolean"
                },
                "is_visible": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role_id": {
                    "type": "string"
                },
                "sername": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "users.UserIn": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password",
                "sername",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "sername": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "users.UserOut": {
            "type": "object",
            "required": [
                "email",
                "id",
                "name",
                "role",
                "sername",
                "username"
            ],
            "properties": {
                "create_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "sername": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "utils.HttpResponse-any": {
            "type": "object",
            "properties": {
                "code_error": {
                    "type": "integer"
                },
                "data": {},
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "utils.HttpResponse-authentications_AuthOut": {
            "type": "object",
            "properties": {
                "code_error": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/authentications.AuthOut"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "utils.HttpResponse-authentications_RefreshTokenOut": {
            "type": "object",
            "properties": {
                "code_error": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/authentications.RefreshTokenOut"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "utils.HttpResponse-users_UserOut": {
            "type": "object",
            "properties": {
                "code_error": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/users.UserOut"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0",
	Host:             "localhost:8000",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "CMagic Auth",
	Description:      "Service d'authentification.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
